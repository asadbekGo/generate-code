package client_handler

import (
	"context"
	"errors"

	"github.com/gin-gonic/gin"

	"warehouse/warehouse_go_api_gateway/api/status_http"
	"warehouse/warehouse_go_api_gateway/genproto/storehouse_client_service"
	"warehouse/warehouse_go_api_gateway/pkg/util"
)

// CreateTemplate godoc
// @Security ApiKeyAuth
// @ID create_template
// @Router /v1/template [POST]
// @Summary Create Template
// @Description Create Template
// @Tags Template
// @Accept json
// @Produce json
// @Param Template body storehouse_client_service.CreateTemplateRequest true "CreateTemplateRequestBody"
// @Success 201 {object} status_http.Response{data=storehouse_client_service.Template} "Template data"
// @Response 400 {object} status_http.Response{data=string} "Bad Request"
// @Failure 500 {object} status_http.Response{data=string} "Server Error"
func (h *Handler) CreateTemplate(c *gin.Context) {

	var template storehouse_client_service.CreateTemplateRequest
	err := c.ShouldBindJSON(&template)
	if err != nil {
		h.HandleResponse(c, status_http.BadRequest, err.Error())
		return
	}

	response, err := h.services.StorehouseClientService().Template().CreateTemplate(
		context.Background(),
		&template,
	)
	if err != nil {
		h.HandleResponse(c, status_http.GRPCError, err.Error())
		return
	}

	h.HandleResponse(c, status_http.Created, response)
}

// GetSingleTemplate godoc
// @Security ApiKeyAuth
// @ID get_template_by_id
// @Router /v1/template/{template_id} [GET]
// @Summary Get single Template
// @Description Get single Template
// @Tags Template
// @Accept json
// @Produce json
// @Param template_id path string true "template_id"
// @Success 200 {object} status_http.Response{data=storehouse_client_service.Template} "TemplateBody"
// @Response 400 {object} status_http.Response{data=string} "Invalid Argument"
// @Failure 500 {object} status_http.Response{data=string} "Server Error"
func (h *Handler) GetSingleTemplate(c *gin.Context) {

	var templateId = c.Param("template_id")
	if !util.IsValidUUID(templateId) {
		h.HandleResponse(c, status_http.InvalidArgument, "template id is an invalid uuid")
		return
	}

	response, err := h.services.StorehouseClientService().Template().GetByIDTemplate(
		context.Background(),
		&storehouse_client_service.TemplatePrimaryKey{Id: templateId},
	)
	if err != nil {
		h.HandleResponse(c, status_http.GRPCError, err.Error())
		return
	}

	h.HandleResponse(c, status_http.OK, response)
}

// GetTemplateList godoc
// @Security ApiKeyAuth
// @ID get_template_list
// @Router /v1/template [GET]
// @Summary Get Template list
// @Description Get Template list
// @Tags Template
// @Accept json
// @Produce json
// @Param filters query storehouse_client_service.GetListTemplateRequest true "filters"
// @Success 200 {object} status_http.Response{data=storehouse_client_service.GetListTemplateResponse} "TemplateBody"
// @Response 400 {object} status_http.Response{data=string} "Invalid Argument"
// @Failure 500 {object} status_http.Response{data=string} "Server Error"
func (h *Handler) GetTemplateList(c *gin.Context) {

	page, err := h.GetPageParam(c)
	if err != nil {
		h.HandleResponse(c, status_http.InvalidArgument, err.Error())
		return
	}


	limit, err := h.GetLimitParam(c)
	if err != nil {
		h.HandleResponse(c, status_http.InvalidArgument, err.Error())
		return
	}

	response, err := h.services.StorehouseClientService().Template().GetListTemplate(
		context.Background(),
		&storehouse_client_service.GetListTemplateRequest{
			Limit:  int32(limit),
			Page:   int32(page),
			Search: c.Query("search"),
		},
	)

	if err != nil {
		h.HandleResponse(c, status_http.GRPCError, err.Error())
		return
	}

	h.HandleResponse(c, status_http.OK, response)
}

// UpdateTemplate godoc
// @Security ApiKeyAuth
// @ID update_template
// @Router /v1/template [PUT]
// @Summary Update Template
// @Description Update Template
// @Tags Template
// @Accept json
// @Produce json
// @Param Template body storehouse_client_service.UpdateTemplateRequest true "UpdateTemplateRequestBody"
// @Success 200 {object} status_http.Response{data=storehouse_client_service.Template} "Template data"
// @Response 400 {object} status_http.Response{data=string} "Bad Request"
// @Failure 500 {object} status_http.Response{data=string} "Server Error"
func (h *Handler) UpdateTemplate(c *gin.Context) {

	var updateTemplate storehouse_client_service.UpdateTemplateRequest
	err := c.ShouldBindJSON(&updateTemplate)
	if err != nil {
		h.HandleResponse(c, status_http.BadRequest, err.Error())
		return
	}

	response, err := h.services.StorehouseClientService().Template().UpdateTemplate(
		context.Background(),
		&updateTemplate,
	)

	if err != nil {
		h.HandleResponse(c, status_http.GRPCError, err.Error())
		return
	}

	h.HandleResponse(c, status_http.Accepted, response)
}

// DeleteTemplate godoc
// @Security ApiKeyAuth
// @ID delete_template
// @Router /v1/template/{template_id} [DELETE]
// @Summary Delete Template
// @Description Delete Template
// @Tags Template
// @Accept json
// @Produce json
// @Param template_id path string true "template_id"
// @Success 204
// @Response 400 {object} status_http.Response{data=string} "Invalid Argument"
// @Failure 500 {object} status_http.Response{data=string} "Server Error"
func (h *Handler) DeleteTemplate(c *gin.Context) {

	var templateId = c.Param("template_id")
	if !util.IsValidUUID(templateId) {
		h.HandleResponse(c, status_http.InvalidArgument, "template id is an invalid uuid")
		return
	}

	response, err := h.services.StorehouseClientService().Template().DeleteTemplate(
		context.Background(),
		&storehouse_client_service.TemplatePrimaryKey{Id: templateId},
	)

	if err != nil {
		h.HandleResponse(c, status_http.GRPCError, err.Error())
		return
	}

	h.HandleResponse(c, status_http.NoContent, response)
}
