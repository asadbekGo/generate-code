package service

import (
	"context"

	"github.com/golang/protobuf/ptypes/empty"
	"google.golang.org/grpc/codes"
	"google.golang.org/grpc/status"
	"google.golang.org/protobuf/types/known/emptypb"

	"warehouse/warehouse_go_storehouse_service/config"
	"warehouse/warehouse_go_storehouse_service/genproto/storehouse_service"
	"warehouse/warehouse_go_storehouse_service/grpc/client"
	"warehouse/warehouse_go_storehouse_service/models"
	"warehouse/warehouse_go_storehouse_service/pkg/logger"
	"warehouse/warehouse_go_storehouse_service/storage"
)

type TemplateService struct {
	cfg      config.Config
	log      logger.LoggerI
	strg     storage.StorageI
	services client.ServiceManagerI
	storehouse_service.UnimplementedTemplateServiceServer
}

func NewTemplateService(cfg config.Config, log logger.LoggerI, strg storage.StorageI, srvs client.ServiceManagerI) *TemplateService {
	return &TemplateService{
		cfg:      cfg,
		log:      log,
		strg:     strg,
		services: srvs,
	}
}

func (i *TemplateService) CreateTemplate(ctx context.Context, req *storehouse_service.CreateTemplateRequest) (resp *storehouse_service.Template, err error) {

	i.log.Info("---CreateTemplate------>", logger.Any("req", req))

	pKey, err := i.strg.Template().Create(ctx, req)
	if err != nil {
		i.log.Error("!!!CreateTemplate->Template->Get--->", logger.Error(err))
		return nil, status.Error(codes.InvalidArgument, err.Error())
	}

	resp, err = i.strg.Template().GetByPKey(ctx, pKey)
	if err != nil {
		i.log.Error("!!!GetByPKeyTemplate->Template->Get--->", logger.Error(err))
		return nil, status.Error(codes.InvalidArgument, err.Error())
	}

	return
}

func (i *TemplateService) GetByIDTemplate(ctx context.Context, req *storehouse_service.TemplatePrimaryKey) (resp *storehouse_service.Template, err error) {

	i.log.Info("---GetByIDTemplate------>", logger.Any("req", req))

	resp, err = i.strg.Template().GetByPKey(ctx, req)
	if err != nil {
		i.log.Error("!!!GetByIDTemplate->Template->Get--->", logger.Error(err))
		return nil, status.Error(codes.InvalidArgument, err.Error())
	}

	return
}

func (i *TemplateService) GetListTemplate(ctx context.Context, req *storehouse_service.GetListTemplateRequest) (resp *storehouse_service.GetListTemplateResponse, err error) {

	i.log.Info("---GetListTemplate------>", logger.Any("req", req))

	resp, err = i.strg.Template().GetAll(ctx, req)
	if err != nil {
		i.log.Error("!!!GetListTemplate->Template->Get--->", logger.Error(err))
		return nil, status.Error(codes.InvalidArgument, err.Error())
	}

	return
}

func (i *TemplateService) UpdateTemplate(ctx context.Context, req *storehouse_service.UpdateTemplateRequest) (resp *storehouse_service.Template, err error) {

	i.log.Info("---UpdateTemplate------>", logger.Any("req", req))

	rowsAffected, err := i.strg.Template().Update(ctx, req)

	if err != nil {
		i.log.Error("!!!UpdateTemplate--->", logger.Error(err))
		return nil, status.Error(codes.InvalidArgument, err.Error())
	}

	if rowsAffected <= 0 {
		return nil, status.Error(codes.InvalidArgument, "no rows were affected")
	}

	resp, err = i.strg.Template().GetByPKey(ctx, &storehouse_service.TemplatePrimaryKey{Id: req.Id})
	if err != nil {
		i.log.Error("!!!UpdateTemplate--->", logger.Error(err))
		return nil, status.Error(codes.NotFound, err.Error())
	}

	return resp, err
}

func (i *TemplateService) UpdatePatchTemplate(ctx context.Context, req *storehouse_service.UpdatePatchTemplateRequest) (resp *storehouse_service.Template, err error) {

	i.log.Info("---UpdatePatchEnrolledStudent------>", logger.Any("req", req))
	updatePatchModel := models.UpdatePatchRequest{
		Id:     req.GetId(),
		Fields: req.GetFields().AsMap(),
	}

	rowsAffected, err := i.strg.Template().UpdatePatch(ctx, &updatePatchModel)

	if err != nil {
		i.log.Error("!!!UpdatePatchOrder--->", logger.Error(err))
		return nil, status.Error(codes.InvalidArgument, err.Error())
	}

	if rowsAffected <= 0 {
		return nil, status.Error(codes.InvalidArgument, "no rows were affected")
	}

	resp, err = i.strg.Template().GetByPKey(ctx, &storehouse_service.TemplatePrimaryKey{Id: req.Id})
	if err != nil {
		i.log.Error("!!!UpdatePatchOrder--->", logger.Error(err))
		return nil, status.Error(codes.NotFound, err.Error())
	}

	return resp, err
}

func (i *TemplateService) DeleteTemplate(ctx context.Context, req *storehouse_service.TemplatePrimaryKey) (resp *empty.Empty, err error) {

	i.log.Info("---DeleteTemplate------>", logger.Any("req", req))

	err = i.strg.Template().Delete(ctx, req)
	if err != nil {
		i.log.Error("!!!DeleteTemplate->Template->Get--->", logger.Error(err))
		return nil, status.Error(codes.InvalidArgument, err.Error())
	}

	return &emptypb.Empty{}, nil
}
